name: "Build and deploy"

on:
  pull_request:
    types: [opened, synchronize, closed]
  workflow_dispatch:

jobs:
  build:
    name: "Build & push image"

    # Any event except closed PR
    if: (github.event_name != 'pull_request') || (github.event.action != 'closed') || github.event.pull_request.merged

    runs-on: ubuntu-latest

    outputs:
      commit_sha: ${{ steps.prepare-arguments.outputs.commit_sha }}
      commit_timestamp: ${{ steps.prepare-arguments.outputs.commit_timestamp }}
      branch_name: ${{ steps.prepare-arguments.outputs.branch_name }}
      helm_values_base64: ${{ steps.prepare-arguments.outputs.helm_values_base64 }}
      image: ${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

    steps:
      - name: Validate repository setup
        env:
          REPOSITORY_DESCRIPTION: ${{ github.event.repository.description }}
          REPOSITORY_HTML_URL: ${{ github.event.repository.html_url }}
        run: |
          if [ -z "$REPOSITORY_DESCRIPTION" ]
          then
            echo "::error::The repository must have a description. Please add it and then rerun the action from here: $REPOSITORY_HTML_URL/actions/workflows/build-deploy.yaml"
            exit 1
          fi

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      - name: Login to ACR
        env:
          ACR_NAME: ${{ vars.ACR_NAME }}
        run: az acr login --name "$ACR_NAME"

      - name: Pull the source code
        uses: actions/checkout@v3

      - name: Extend dockerignore
        run: |
          echo >> .dockerignore
          echo .git >> .dockerignore
          echo .github >> .dockerignore
          echo Dockerfile >> .dockerignore
          echo helm-values.yaml >> .dockerignore

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure SSH agent
        uses: webfactory/ssh-agent@836c84ec59a0e7bc0eabc79988384eb567561ee2
        with:
          ssh-private-key: ${{ secrets.DEVOPS_BOT_GITHUB_SSH_KEY }}

      - name: Prepare build arguments
        id: prepare-arguments
        env:
          COMMIT_SHA: ${{ github.event.after || github.sha }}
          BRANCH_NAME: ${{ (github.event.pull_request.merged && github.base_ref) || github.head_ref || github.ref_name }}
          IMAGE_NAME: "${{ vars.ACR_REGISTRY }}/${{ github.event.repository.name }}"
          GITHUB_TOKEN: "${{ secrets.DEVOPS_BOT_GITHUB_TOKEN }}"

        run: |
          echo "commit_sha=$COMMIT_SHA" >> "$GITHUB_OUTPUT"
          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

          COMMIT_TIMESTAMP="$(git show --no-patch --format=%cI)"
          echo "commit_timestamp=$COMMIT_TIMESTAMP" >> "$GITHUB_OUTPUT"

          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"

          # Generate metadata JSON
          BUILD_METADATA="$( \
            jq --null-input --compact-output '{"buildMetadata": {"labels": $ARGS.named}}' \
              --arg     org.opencontainers.image.revision "$COMMIT_SHA" \
              --arg     org.opencontainers.image.source "${{ github.server_url }}/${{ github.repository }}" \
              --arg     com.delphai.image.repository "${{ github.repository }}" \
              --arg     com.delphai.image.branch "$BRANCH_NAME" \
              --argjson com.delphai.image.release "${{ github.ref_name == github.event.repository.default_branch }}" \
              --arg     com.delphai.image.timestamp "$COMMIT_TIMESTAMP" \
              --argjson com.delphai.image.pr "${{ github.event.pull_request.number || 'null' }}" \
              --arg     com.delphai.image.ci.url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}" \
              --argjson com.delphai.image.ci.run_id "${{ github.run_id }}" \
              --argjson com.delphai.image.ci.run_attempt "${{ github.run_attempt }}" \
          )"

          # Convert JSON to arguments list
          echo "IMAGE_LABELS<<EOF" >> "$GITHUB_ENV"
          echo "$BUILD_METADATA" | jq --raw-output '.buildMetadata.labels | to_entries | map("\(.key)=\(.value)") | join("\n")' >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

          # Merge metadata into Helm values
          HELM_VALUES="$(yq eval-all '. as $item ireduce ({}; . * $item )' <(cat "helm-values.yaml" || echo "{}") <(echo "$BUILD_METADATA"))"
          echo "helm_values_base64=$(echo "$HELM_VALUES" | base64 --wrap=0)" >> "$GITHUB_OUTPUT"

          if [ "$GITHUB_REF_NAME" = "${{ github.event.repository.default_branch }}" ]
          then
            # Release build

            LABELS+=("release-${{ github.run_id }}-${{ github.run_attempt }}")

            if [ "${{ github.run_attempt }}" -eq 1 ]
            then
              LABELS+=("latest")
            fi
          else
            # Branch build

            LABELS+=("branch-$BRANCH_NAME-${{ github.run_id }}-${{ github.run_attempt }}")
            LABELS+=("branch-$BRANCH_NAME")
          fi

          for LABEL in ${LABELS[@]}
          do
            BUILD_TAGS+=("$IMAGE_NAME:$LABEL")
          done

          # Convert to arguments list
          echo "BUILD_TAGS<<EOF" >> "$GITHUB_ENV"
          (IFS=$'\n'; echo "${BUILD_TAGS[*]}") >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

          echo "SSH_KNOWN_HOSTS_FILE=$HOME/.ssh/known_hosts" >> "$GITHUB_ENV"

          echo "@delphai:registry=https://npm.pkg.github.com" >> "$HOME/.npmrc"
          echo "//npm.pkg.github.com/:_authToken=$GITHUB_TOKEN" >> "$HOME/.npmrc"
          echo "NPMRC_FILE=$HOME/.npmrc" >> "$GITHUB_ENV"

      - name: Build and push image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .

          build-args: |
            CI=true

          secrets: |
            GITHUB_TOKEN=${{ secrets.DEVOPS_BOT_GITHUB_TOKEN }}

          secret-files: |
            SSH_KNOWN_HOSTS=${{ env.SSH_KNOWN_HOSTS_FILE }}
            NPMRC=${{ env.NPMRC_FILE }}

          ssh: default=${{ env.SSH_AUTH_SOCK }}

          labels: ${{ env.IMAGE_LABELS }}

          tags: ${{ env.BUILD_TAGS }}

          cache-from: |
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-${{ steps.prepare-arguments.outputs.branch_name }}
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-${{ github.head_ref }}
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-${{ github.base_ref }}
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-${{ github.event.repository.default_branch }}

          cache-to: |
            type=registry,ref=${{ env.IMAGE_NAME }}:cache-${{ steps.prepare-arguments.outputs.branch_name }},mode=max

          push: true

      - name: Generate job summary
        run: |
          cat <<'EOF' >> "$GITHUB_STEP_SUMMARY"
          <details>
          <summary>Assigned labels</summary>

          ```
          ${{ env.BUILD_TAGS }}
          ```
          </details>

          ```bash
          az acr login --name "${{ vars.ACR_NAME }}"
          docker pull "${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}"
          ```
          EOF

  deploy:
    name: "Deploy to k8s"

    needs: build

    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment:
          - review
          - production

        exclude:
          - environment: ${{ github.ref_name == github.event.repository.default_branch && '-' || 'production' }}

    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.generate-job-summary.outputs.endpoint_url }}

    steps:
      - name: Make slug variables
        uses: rlespinasse/github-slug-action@v4.x

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      - name: Login to AKS
        run: az aks get-credentials ${{ vars[format('AKS_GET_CREDENTIALS_{0}', matrix.environment)] }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.10.1"

      - name: Generate Helm release name
        run: |
          # Use `_SLUG_URL` variants to pass Helm validation

          RELEASE_NAME="$GITHUB_REPOSITORY_NAME_PART_SLUG_URL"
          if [ "$GITHUB_REF_NAME" != "${{ github.event.repository.default_branch }}" ]
          then
            RELEASE_NAME="$RELEASE_NAME-${{ env.GITHUB_HEAD_REF_SLUG_URL || env.GITHUB_REF_SLUG_URL }}"
          fi

          # Ensure name length https://github.com/helm/helm/issues/6006#issuecomment-553184466
          HELM_MAX_RELEASE_NAME_LENGTH=39
          if [ "${#RELEASE_NAME}" -gt "$HELM_MAX_RELEASE_NAME_LENGTH" ]; then
              RELEASE_NAME="$(echo "$RELEASE_NAME" | cut --characters -30)-$(echo "$RELEASE_NAME" | md5sum | cut --characters -8)"
          fi

          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_ENV"

      - name: Install / upgrade Helm release
        env:
          COMMIT_TIMESTAMP: ${{ needs.build.outputs.commit_timestamp }}
          BRANCH_NAME: ${{ needs.build.outputs.branch_name }}
          HELM_REPOSITORY_URL: ${{ vars.HELM_REPOSITORY_URL }}
          HELM_CHART_NAME: "delphai-deployment"
          HELM_VALUES_BASE64: ${{ needs.build.outputs.helm_values_base64 }}

        run: |
          set -o pipefail

          helm repo add repo "$HELM_REPOSITORY_URL"
          helm pull --untar "repo/$HELM_CHART_NAME"

          # Patch app version https://github.com/helm/helm/issues/8194
          mv "$HELM_CHART_NAME/Chart.yaml" "$HELM_CHART_NAME/Chart-original.yaml"
          yq ".appVersion=\"${BRANCH_NAME::16}-${COMMIT_TIMESTAMP::10}\"" "$HELM_CHART_NAME/Chart-original.yaml" > "$HELM_CHART_NAME/Chart.yaml"

          echo "$HELM_VALUES_BASE64" | base64 --decode > values.yaml

          helm upgrade \
            --install \
            --create-namespace \
            --namespace "$GITHUB_REPOSITORY_NAME_PART_SLUG_URL" \
            --wait \
            "$RELEASE_NAME" \
            "./$HELM_CHART_NAME" \
            --values "values.yaml" \
            --set "image=${{ needs.build.outputs.image }}" \
            2>&1 | tee helm-upgrade.log

      - name: Generate job summary
        id: generate-job-summary
        if: success() || failure()
        run: |
          if [ -f "helm-upgrade.log" ]
          then
            # Extract all after "NOTES:"
            sed '1,/^NOTES:$/d' helm-upgrade.log > helm-notes.txt
            # Keep only before "NOTES:"
            sed --in-place '/^NOTES:$/,$d' helm-upgrade.log

            if ENDPOINT_URL="$(grep --ignore-case --extended-regexp --only-matching --max-count 1 "https?://\S+" helm-notes.txt)"
            then
              echo "endpoint_url=$ENDPOINT_URL" >> "$GITHUB_OUTPUT"
            fi

            cat helm-notes.txt >> "$GITHUB_STEP_SUMMARY"

            echo "<details>" >> "$GITHUB_STEP_SUMMARY"
            echo "<summary>Helm upgrage log</summary>" >> "$GITHUB_STEP_SUMMARY"
            echo >> "$GITHUB_STEP_SUMMARY"
            cat helm-upgrade.log >> "$GITHUB_STEP_SUMMARY"
            echo "</details>" >> "$GITHUB_STEP_SUMMARY"
          fi
